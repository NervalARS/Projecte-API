// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using M15_ProjecteConsumidor.Model;
//
//    var restaurant = Restaurant.FromJson(jsonString);

namespace M15_ProjecteConsumidor.Model
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Restaurant
    {
        [JsonProperty("result")]
        public Result Result { get; set; }
    }

    public partial class Result
    {
        [JsonProperty("restaurant_name")]
        public string RestaurantName { get; set; }

        [JsonProperty("restaurant_phone")]
        public string RestaurantPhone { get; set; }

        [JsonProperty("restaurant_website")]
        public Uri RestaurantWebsite { get; set; }

        [JsonProperty("hours")]
        public string Hours { get; set; }

        [JsonProperty("price_range")]
        public string PriceRange { get; set; }

        [JsonProperty("price_range_num")]
        public long PriceRangeNum { get; set; }

        [JsonProperty("restaurant_id")]
        public long RestaurantId { get; set; }

        [JsonProperty("cuisines")]
        public List<string> Cuisines { get; set; }

        [JsonProperty("address")]
        public Address Address { get; set; }

        [JsonProperty("geo")]
        public Geo Geo { get; set; }

        [JsonProperty("menus")]
        public List<MMenu> Menus { get; set; }

        [JsonProperty("last_updated")]
        public DateTimeOffset LastUpdated { get; set; }
    }

    public partial class Address
    {
        [JsonProperty("city")]
        public string City { get; set; }

        [JsonProperty("state")]
        public string State { get; set; }

        [JsonProperty("postal_code")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long PostalCode { get; set; }

        [JsonProperty("street")]
        public string Street { get; set; }

        [JsonProperty("formatted")]
        public string Formatted { get; set; }
    }

    public partial class Geo
    {
        [JsonProperty("lat")]
        public double Lat { get; set; }

        [JsonProperty("lon")]
        public double Lon { get; set; }
    }

    public partial class MMenu
    {
        [JsonProperty("menu_name")]
        public string MenuName { get; set; }

        [JsonProperty("menu_sections")]
        public List<MenuSection> MenuSections { get; set; }
    }

    public partial class MenuSection
    {
        [JsonProperty("section_name")]
        public string SectionName { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("menu_items")]
        public List<MenuItem> MenuItems { get; set; }
    }

    public partial class MenuItem
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("pricing")]
        public List<Pricing> Pricing { get; set; }

        [JsonProperty("price")]
        public double Price { get; set; }
    }

    public partial class Pricing
    {
        [JsonProperty("price")]
        public double Price { get; set; }

        [JsonProperty("currency")]
        public Currency Currency { get; set; }

        [JsonProperty("priceString")]
        public string PriceString { get; set; }
    }

    public enum Currency { Usd };

    public partial class Restaurant
    {
        public static Restaurant FromJson(string json) => JsonConvert.DeserializeObject<Restaurant>(json, M15_ProjecteConsumidor.Model.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Restaurant self) => JsonConvert.SerializeObject(self, M15_ProjecteConsumidor.Model.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                CurrencyConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class CurrencyConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Currency) || t == typeof(Currency?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "USD")
            {
                return Currency.Usd;
            }
            throw new Exception("Cannot unmarshal type Currency");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Currency)untypedValue;
            if (value == Currency.Usd)
            {
                serializer.Serialize(writer, "USD");
                return;
            }
            throw new Exception("Cannot marshal type Currency");
        }

        public static readonly CurrencyConverter Singleton = new CurrencyConverter();
    }
}

